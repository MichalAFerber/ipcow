---
layout: page
title: WHOIS Lookup
subtitle: Retrieve WHOIS information for a domain.
share-description: "IP Cow is a free service that shows you the public IP address of your device along with information about your computer and web browser. IP Cow also offers an Ookla Speedtest and other network resources and tools."
# full-width: true
---
<!-- This snippet is a standalone WHOIS lookup form that uses hCaptcha for verification and fetches WHOIS data from a server-side script. 
     The form is designed to allow users to check WHOIS information for a domain. -->
<form class="form-inline justify-content-center" method="GET" action="/api/whois.php" novalidate>
  <input type="text" class="form-control" id="domain" name="domain" placeholder="google.com" required>
  <div id="hcaptcha-widget" class="h-captcha" data-sitekey="1eb25e26-63d0-476a-bcb6-ae62a2b04752" data-size="invisible" data-callback="hcaptchaVerifyCallback"></div>
  <button type="submit" class="btn btn-primary">Check WHOIS</button>
</form>

<!-- Display the WHOIS results here -->
<div id="whois-results" style="display: none;"></div>

<!-- Load hCaptcha and custom module -->
<script src="https://js.hcaptcha.com/1/api.js" async defer></script>
<script src="/assets/js/hcaptcha-module.js" defer></script>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    window.hcaptchaManager = new HcaptchaManager({
      formSelector: 'form',
      resultsId: 'whois-results'
    });

    const form = document.querySelector('form');
    const domainInput = document.getElementById('domain');
    const resultsDiv = document.getElementById('whois-results');

    if (!form || !domainInput || !resultsDiv) {
      console.error('Form, domain input, or results div not found');
      return;
    }

    // Function to parse raw WHOIS string into structured data
    function parseWhoisData(rawWhois, queriedDomain) {
      const lines = rawWhois.split('\n').map(line => line.trim());
      const whoisData = {
        domain_name: queriedDomain,
        registrar: {},
        dates: {},
        status: [],
        name_servers: [],
        registrant: {},
        admin: {},
        tech: {},
        billing: {},
        raw: {}
      };

      console.log('Parsing WHOIS data, total lines:', lines.length);

      let currentContactType = null;
      let inContactSection = false;

      const stopMarkers = [
        '>>> Last update of WHOIS database:',
        '>>>_last_update_of_whois_database'
      ];
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        let stopMarkerFound = false;
        for (const marker of stopMarkers) {
          if (line.startsWith(marker)) {
            whoisData.last_updated = line.split(marker)[1].trim();
            console.log('Found stop marker, last_updated:', whoisData.last_updated);
            stopMarkerFound = true;
            break;
          }
        }
        if (stopMarkerFound) break;

        if (!line || line.startsWith('#') || line.startsWith('%')) continue;

        const match = line.match(/([^:]+):(.+)/);
        if (!match) {
          console.log('Skipping line (no key-value pair):', line);
          if (inContactSection) {
            currentContactType = null;
            inContactSection = false;
          }
          continue;
        }
        const key = match[1].trim().toLowerCase().replace(/\s+/g, '_');
        let value = match[2].trim();

        let mappedKey = key;
        if (key === 'nserver') mappedKey = 'name_server';
        else if (key === 'fax-no') mappedKey = 'fax';

        console.log(`Parsed line - key: ${key}, mappedKey: ${mappedKey}, value: ${value}`);

        if (mappedKey === 'contact') {
          currentContactType = value.toLowerCase();
          inContactSection = true;
          continue;
        }

        if (currentContactType && inContactSection) {
          let targetObject;
          if (currentContactType === 'administrative') targetObject = whoisData.registrant;
          else if (currentContactType === 'technical') targetObject = whoisData.tech;
          else if (currentContactType === 'billing') targetObject = whoisData.billing;
          else targetObject = whoisData.admin;

          if (mappedKey === 'name') targetObject.name = value;
          else if (mappedKey === 'organisation') targetObject.organization = value;
          else if (mappedKey === 'address') {
            if (!targetObject.street) targetObject.street = value;
            else if (!targetObject.city) targetObject.city = value;
            else if (!targetObject.country) targetObject.country = value;
          }
          else if (mappedKey === 'phone') targetObject.phone = value;
          else if (mappedKey === 'fax') targetObject.fax = value;
          else if (mappedKey === 'e-mail') targetObject.email = value;
          else {
            whoisData.raw[mappedKey] = value;
          }
          continue;
        }

        if (mappedKey === 'domain_name') whoisData.domain_name = value;
        else if (mappedKey === 'registry_domain_id') whoisData.registry_domain_id = value;
        else if (mappedKey.startsWith('registrar')) {
          if (mappedKey === 'registrar') whoisData.registrar.name = value;
          else if (mappedKey === 'registrar_whois_server') whoisData.registrar.whois_server = value;
          else if (mappedKey === 'registrar_url') whoisData.registrar.url = value;
          else if (mappedKey === 'registrar_iana_id') whoisData.registrar.iana_id = value;
          else if (mappedKey === 'registrar_abuse_contact_email') whoisData.registrar.abuse_contact_email = value;
          else if (mappedKey === 'registrar_abuse_contact_phone') whoisData.registrar.abuse_contact_phone = value;
        }
        else if (mappedKey === 'organisation') {
          whoisData.registrar.name = value;
        }
        else if (mappedKey === 'updated_date' || mappedKey === 'creation_date' || mappedKey === 'registrar_registration_expiration_date' || mappedKey === 'registry_expiry_date' || mappedKey === 'changed' || mappedKey === 'created') {
          if (mappedKey === 'updated_date' || mappedKey === 'changed') whoisData.dates.updated = value;
          else if (mappedKey === 'creation_date' || mappedKey === 'created') whoisData.dates.created = value;
          else if (mappedKey === 'registrar_registration_expiration_date' || mappedKey === 'registry_expiry_date') whoisData.dates.expiry = value;
        }
        else if (mappedKey === 'domain_status' || mappedKey === 'status') {
          whoisData.status.push(value);
        }
        else if (mappedKey === 'name_server') {
          whoisData.name_servers.push(value);
        }
        else if (mappedKey === 'dnssec') {
          whoisData.dnssec = value;
        }
        else if (mappedKey.startsWith('registrant')) {
          if (mappedKey === 'registrant_name') whoisData.registrant.name = value;
          else if (mappedKey === 'registrant_organization') whoisData.registrant.organization = value;
          else if (mappedKey === 'registrant_street') whoisData.registrant.street = value;
          else if (mappedKey === 'registrant_city') whoisData.registrant.city = value;
          else if (mappedKey === 'registrant_state/province') whoisData.registrant.state_province = value;
          else if (mappedKey === 'registrant_postal_code') whoisData.registrant.postal_code = value;
          else if (mappedKey === 'registrant_country') whoisData.registrant.country = value;
          else if (mappedKey === 'registrant_phone') whoisData.registrant.phone = value;
          else if (mappedKey === 'registrant_phone_ext') whoisData.registrant.phone_ext = value;
          else if (mappedKey === 'registrant_fax') whoisData.registrant.fax = value;
          else if (mappedKey === 'registrant_fax_ext') whoisData.registrant.fax_ext = value;
          else if (mappedKey === 'registrant_email') whoisData.registrant.email = value;
        }
        else if (mappedKey.startsWith('admin')) {
          if (mappedKey === 'admin_name') whoisData.admin.name = value;
          else if (mappedKey === 'admin_organization') whoisData.admin.organization = value;
          else if (mappedKey === 'admin_street') whoisData.admin.street = value;
          else if (mappedKey === 'admin_city') whoisData.admin.city = value;
          else if (mappedKey === 'admin_state/province') whoisData.admin.state_province = value;
          else if (mappedKey === 'admin_postal_code') whoisData.admin.postal_code = value;
          else if (mappedKey === 'admin_country') whoisData.admin.country = value;
          else if (mappedKey === 'admin_phone') whoisData.admin.phone = value;
          else if (mappedKey === 'admin_phone_ext') whoisData.admin.phone_ext = value;
          else if (mappedKey === 'admin_fax') whoisData.admin.fax = value;
          else if (mappedKey === 'admin_fax_ext') whoisData.admin.fax_ext = value;
          else if (mappedKey === 'admin_email') whoisData.admin.email = value;
        }
        else if (mappedKey.startsWith('tech')) {
          if (mappedKey === 'tech_name') whoisData.tech.name = value;
          else if (mappedKey === 'tech_organization') whoisData.tech.organization = value;
          else if (mappedKey === 'tech_street') whoisData.tech.street = value;
          else if (mappedKey === 'tech_city') whoisData.tech.city = value;
          else if (mappedKey === 'tech_state/province') whoisData.tech.state_province = value;
          else if (mappedKey === 'tech_postal_code') whoisData.tech.postal_code = value;
          else if (mappedKey === 'tech_country') whoisData.tech.country = value;
          else if (mappedKey === 'tech_phone') whoisData.tech.phone = value;
          else if (mappedKey === 'tech_phone_ext') whoisData.tech.phone_ext = value;
          else if (mappedKey === 'tech_fax') whoisData.tech.fax = value;
          else if (mappedKey === 'tech_fax_ext') whoisData.tech.fax_ext = value;
          else if (mappedKey === 'tech_email') whoisData.tech.email = value;
        }
        else if (mappedKey.startsWith('billing')) {
          if (mappedKey === 'billing_name') whoisData.billing.name = value;
          else if (mappedKey === 'billing_organization') whoisData.billing.organization = value;
          else if (mappedKey === 'billing_street') whoisData.billing.street = value;
          else if (mappedKey === 'billing_city') whoisData.billing.city = value;
          else if (mappedKey === 'billing_state/province') whoisData.billing.state_province = value;
          else if (mappedKey === 'billing_postal_code') whoisData.billing.postal_code = value;
          else if (mappedKey === 'billing_country') whoisData.billing.country = value;
          else if (mappedKey === 'billing_phone') whoisData.billing.phone = value;
          else if (mappedKey === 'billing_phone_ext') whoisData.billing.phone_ext = value;
          else if (mappedKey === 'billing_fax') whoisData.billing.fax = value;
          else if (mappedKey === 'billing_fax_ext') whoisData.billing.fax_ext = value;
          else if (mappedKey === 'billing_email') whoisData.billing.email = value;
        }
        else {
          whoisData.raw[mappedKey] = value;
        }
      }

      if (!Object.keys(whoisData.registrar).length) delete whoisData.registrar;
      if (!Object.keys(whoisData.dates).length) delete whoisData.dates;
      if (!whoisData.status.length) delete whoisData.status;
      if (!whoisData.name_servers.length) delete whoisData.name_servers;
      if (!Object.keys(whoisData.registrant).length) delete whoisData.registrant;
      if (!Object.keys(whoisData.admin).length) delete whoisData.admin;
      if (!Object.keys(whoisData.tech).length) delete whoisData.tech;
      if (!Object.keys(whoisData.billing).length) delete whoisData.billing;
      if (!Object.keys(whoisData.raw).length) delete whoisData.raw;

      console.log('Parsed WHOIS data:', whoisData);
      return whoisData;
    }

    // Function to extract base domain from various input formats
    function extractBaseDomain(input) {
      try {
        // Basic validation
        const sanitizedInput = input.trim().toLowerCase().replace(/[^a-z0-9.-]/g, '');
        if (!sanitizedInput.includes('.')) {
          console.warn('Invalid domain format, using as-is:', sanitizedInput);
          return sanitizedInput;
        }

        // Parse the input as a URL
        let url;
        try {
          url = new URL(input);
        } catch (e) {
          console.warn('Invalid URL, treating as domain:', sanitizedInput);
          return sanitizedInput;
        }

        let hostname = url.hostname.toLowerCase();
        const parts = hostname.split('.');
        if (parts.length > 2) {
          hostname = parts.slice(-2).join('.');
          const tldList = ['co.uk', 'org.uk', 'me.uk', 'ltd.uk', 'com.au', 'org.au', 'net.au', 'co.jp', 'or.kr', 'com.br', 'org.br'];
          const potentialTld = parts.slice(-2).join('.');
          if (tldList.includes(potentialTld)) {
            hostname = parts.slice(-3).join('.');
          }
        }

        return hostname;
      } catch (error) {
        console.error('Error extracting base domain:', error);
        return input.trim().toLowerCase().replace(/[^a-z0-9.-]/g, '');
      }
    }

    // Remove placeholder and focus on input click
    domainInput.addEventListener('click', () => {
      domainInput.placeholder = '';
      domainInput.focus();
    });

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      resultsDiv.style.display = 'block';

      hcaptchaManager.resetHcaptcha();
      let success = false;
      try {
        console.log('Attempting hCaptcha verification...');
        success = await hcaptchaManager.executeHcaptcha();
        console.log('hCaptcha verification result:', success);
        if (!success) {
          throw new Error('hCaptcha verification failed after maximum retries');
        }
      } catch (error) {
        console.error('hCaptcha error caught:', error);
        resultsDiv.innerHTML = `
          <div class="alert alert-warning alert-dismissible fade show" role="alert" aria-live="assertive">
            hCaptcha verification failed: ${error.message}. Please try again or check your network connection.
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
        `;
        return;
      }

      // Extract base domain from input
      let domainInputValue = domainInput.value.trim();
      let domain = extractBaseDomain(domainInputValue);
      console.log('Extracted base domain:', domain);

      resultsDiv.innerHTML = '<div class="d-flex justify-content-center"><div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div></div>';

      try {
        const maxRetries = 3;
        const retryDelay = 5000;
        let response;
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
          try {
            console.log(`Fetching WHOIS data (attempt ${attempt} of ${maxRetries})...`);
            const startTime = performance.now();
            response = await fetch(`/api/whois.php?domain=${encodeURIComponent(domain)}&h-captcha-response=${encodeURIComponent(hcaptchaManager.getHcaptchaResponse())}`, {
              signal: AbortSignal.timeout(30000)
            });
            const endTime = performance.now();
            const latency = (endTime - startTime).toFixed(2);
            console.log(`Fetch completed in ${latency}ms`);
            break;
          } catch (error) {
            console.error(`Fetch attempt ${attempt} failed:`, error);
            if (attempt === maxRetries) {
              throw new Error('Failed to fetch WHOIS data after maximum retries');
            }
            await new Promise(resolve => setTimeout(resolve, retryDelay));
          }
        }

        if (!response.ok) {
          const text = await response.text();
          console.error('Server response:', text);
          throw new Error(`HTTP Error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Received WHOIS response:', data);

        const whoisData = data.whois || '';
        if (
          !whoisData ||
          whoisData.trim() === '' ||
          whoisData.toLowerCase().includes('no match') ||
          whoisData.toLowerCase().includes('not found') ||
          whoisData.toLowerCase().includes('no data') ||
          whoisData.toLowerCase().includes('connection timeout') ||
          whoisData.toLowerCase().includes('could not') ||
          whoisData.toLowerCase().includes('error')
        ) {
          resultsDiv.innerHTML = `
            <div class="alert alert-primary alert-dismissible fade show" role="alert" aria-live="assertive">
              No WHOIS data found for this domain.
              <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
          `;
          return;
        }

        let formatted = `
          <h3 class="text-center"><span class="font-weight-bold">${domain}</span></h3>
          <div class="main-explain-area jumbotron jumbotron-fluid">
            <section class="flush-container">
              <p class="lead font-weight-bold">WHOIS Data</p>
              <div class="flush-container">
                <pre style="white-space: pre-wrap; word-wrap: break-word; margin: 0; padding: 0;">${whoisData.trim()}</pre>
              </div>
            </section>
          </div>
          <div class="button-container d-flex justify-content-center mt-3">
            <!-- Placeholder for the button -->
          </div>
        `;

        resultsDiv.innerHTML = formatted;

        const exportBtn = document.createElement('button');
        exportBtn.textContent = 'Download JSON';
        exportBtn.className = 'btn btn-primary';
        exportBtn.onclick = () => {
          const parsedWhois = parseWhoisData(whoisData, domain);
          const exportData = {
            domain: domain,
            whois: parsedWhois
          };
          const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${domain}_whois.json`;
          a.click();
          URL.revokeObjectURL(url);
        };

        const buttonContainer = resultsDiv.querySelector('.button-container');
        buttonContainer.appendChild(exportBtn);

        // Clear input and focus after successful lookup
        domainInput.value = '';
        domainInput.focus();
      } catch (error) {
        console.error('Error in WHOIS lookup:', error);
        resultsDiv.innerHTML = `
          <div class="alert alert-danger alert-dismissible fade show" role="alert" aria-live="assertive">
            Error: ${error.message}. Please check the domain and try again.
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
        `;
      }
    });
  });
</script>